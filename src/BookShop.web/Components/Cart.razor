@using System.Web
@using BookShop.web.Pages
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using System.Collections
@using BookShop.shared

<div class="card @Class" style="@Style">
    <div class="card-header">
        Cart
    </div>

    <div class="card-body px-0">
        <ul class="list-group list-group-flush">
            @if (NoItems)
            {
                <li class="list-group-item">Empty Cart</li>
            }
            else
            {
                @foreach (var (id, title, count) in Items
                    .OrderBy(t => t.Title))
                {
                    <li class="list-group-item border-0">
                        <div class="d-flex flex-row">
                            <span class="flex-fill overflow-hidden"><span>@count</span>x @title</span>
                            
                            @if (OnItemRemoved.HasDelegate)
                            {
                                <button class="border-0 bg-transparent font-weight-bolder" @onclick="@(_ => OnItemRemoved.InvokeAsync(id))">❌</button>    
                            }
                            
                        </div>
                    </li>
                }
            }
        </ul>
        @if (Price != null)
        {
            <div>
                <div class="d-flex flex-row pt-1">
                    <span class="flex-fill align-self-baseline text-uppercase text-end pr-3">Total:</span>
                    <Price class="mx-3 align-self-baseline" Value="@Price.Total"/>
                </div>

                <CollapsiblePanel Visible="@Price.Discounts.Any()" Collapsed="true" class="m-2">
                    <Header>
                        <span class="flex-fill align-self-baseline text-lowercase text-end">
                            <i>Discounts</i>
                        </span>
                    </Header>
                    <Body>
                    <ul class="text-end p-1 fst-italic">
                        @foreach (var discount in Price.Discounts)
                        {
                            <li class="list-group-item border-0 px-2 py-0">@discount</li>
                        }
                    </ul>
                    </Body>
                </CollapsiblePanel>
            </div>
        }
    </div>
</div>

@code {

    public class ItemsList : IEnumerable<Item>, IEquatable<ItemsList> {
        private readonly List<Item> _items;

        private ItemsList(List<Item> items)
        {
            _items = items;
        } 
        
        public IEnumerator<Item> GetEnumerator()
        {
            return _items.GetEnumerator();
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
        
        public static implicit operator ItemsList(Item[] items)
        {
            return new ItemsList(items.ToList());
        }
        
        public static implicit operator ItemsList(List<Item> items)
        {
            return new ItemsList(items);
        }

        public bool Equals(ItemsList? other)
        {
            if (other is null)
            {
                return false;
            }
            
            return _items.SequenceEqual(other._items);
        }
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((ItemsList)obj);
        }
        public override int GetHashCode()
        {
            return _items.GetHashCode();
        }

    } 

    public record Item(
        string Id,
        string Title,
        int Quantity
        );

    [Parameter]
    public ItemsList Items { get; set; } = null!;

    [Parameter]
    public EventCallback<string> OnItemRemoved { get; set; }
    
   
    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public PriceResponse? Price { get; set; }

    private bool NoItems => !Items.Any();
}