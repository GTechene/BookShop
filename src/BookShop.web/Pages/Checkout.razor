@page "/checkout"
@using BookShop.shared
@using Card = BookShop.web.Data.Card

@inject NavigationManager NavigationManager
@inject CatalogHttpClient CatalogHttpClient
@inject CheckoutHttpClient CheckoutHttpClient
@inject PriceHttpClient PriceHttpClient

<PageTitle>Checkout</PageTitle>

<div class="d-flex flex-row">
    <div class="flex-fill d-flex flex-column mx-3">
        <CheckoutForm Url="@Url"
                      Price="@Price?.Total"
                      OnCheckout="@OnCheckout"
                      OnRedirect="@On3D1ValidationRedirect"
                      CanCheckout="@(Price is not null)" />
    </div>

    <div style="width:400px;min-height:350px;">
        <Cart Items="@CartItems" Price="@Price" Style="position: sticky; top: 73px; z-index: 10;"/>
        <Form3DS1 Url="@_3d1ValidationUrl" Card="@Card" Price="@Price?.Total" RedirectUrl="@_redirectUrl" />
    </div>
</div>

@code {
    private Cart.Item[] CartItems => _cartItems ?? Array.Empty<Cart.Item>();
    private Cart.Item[]? _cartItems;
    
    private Urls.Checkout? Url { get; set; }
    
    private PriceResponse? Price { get; set; }
    private Card? Card { get; set; }

    private string? _3d1ValidationUrl;
    private string? _redirectUrl;

    protected override async Task OnInitializedAsync()
    {
        Url = Urls.Checkout.Parse(NavigationManager.ToAbsoluteUri(NavigationManager.Uri));

        if (Url is null)
        {
            return;
        }
        
        var getBookReferencesTasks =
            Url.Books.GroupBy(id => id)
                .Select(async group => {
                    var reference = await CatalogHttpClient.GetBookReference(group.Key);
                    return new Cart.Item(
                        reference!.ISBN,
                        reference.Title,
                        group.Count()
                        );
                });

        _cartItems = await Task.WhenAll(getBookReferencesTasks);

        Price = await PriceHttpClient.GetCartPrice(Url.Books);
    }

    
    private async Task OnCheckout(CheckoutForm.CheckoutAndPaymentInfo checkoutAndPaymentInfo)
    {
        if (Url is null)
        {
            return;
        }

        Price ??= await PriceHttpClient.GetCartPrice(Url.Books);
        
        var (checkoutInfo, payment) = checkoutAndPaymentInfo;
        
        var billingAddress = new Address(
            checkoutInfo.BillingAddress.Address,
            checkoutInfo.BillingAddress.Address2,
            checkoutInfo.BillingAddress.ZipCode,
            checkoutInfo.BillingAddress.Country
            );

        var shippingAddress = checkoutInfo.SameAddressForShippingAsBilling ?
            billingAddress :
            new Address(
                checkoutInfo.ShippingAddress.Address,
                checkoutInfo.ShippingAddress.Address2,
                checkoutInfo.ShippingAddress.ZipCode,
                checkoutInfo.ShippingAddress.Country
                );

        var customer = new Customer(
            checkoutInfo.FirstName,
            checkoutInfo.LastName,
            checkoutInfo.UserName,
            checkoutInfo.Email,
            billingAddress,
            shippingAddress);
        
        var checkout = new CheckoutRequest(
            Url.Books,
            Price!.Total.Amount,
            Price.Total.Currency,
            customer,
            payment
            );

        var checkoutResponse = await CheckoutHttpClient.Checkout(checkout);

        var receiptUrl = new Urls.Receipt(checkoutResponse.ReceiptId);
        
        NavigationManager.NavigateTo(receiptUrl.ToString());
    }
    
    private void On3D1ValidationRedirect(CheckoutForm.RedirectInfo redirectInfo)
    {
        if (Url is null)
        {
            return;
        }
        
        var (model, url3DS1Validation) = redirectInfo;
        
        // 1. Generate Urls.Checkout
        var checkoutUrl = Url with {
            FirstName = model.FirstName,
            LastName = model.LastName,
            UserName = model.UserName,
            Email = model.Email,
            BillingAddress = model.BillingAddress.Address,
            BillingAddress2 = model.BillingAddress.Address2,
            BillingCountry = model.BillingAddress.Country,
            BillingState = model.BillingAddress.State,
            BillingZipCode = model.BillingAddress.ZipCode,
            
            ShippingAddress = model.ShippingAddress.Address,
            ShippingAddress2 = model.ShippingAddress.Address2,
            ShippingCountry = model.ShippingAddress.Country,
            ShippingState = model.ShippingAddress.State,
            ShippingZipCode = model.ShippingAddress.ZipCode,
            
            SameAddressForShippingAsBilling = model.SameAddressForShippingAsBilling,
            
            Redirected = true,
            
            BaseUrl = NavigationManager.BaseUri
        };

        Card = new Card(model.Card.Number.Replace(" ", ""), model.Card.ExpirationDate, model.Card.SecurityCode, model.Card.Name);
        _redirectUrl = checkoutUrl.ToString();
        _3d1ValidationUrl = url3DS1Validation;
    }
}